#include<bits/stdc++.h>
using namespace std;

class node{
  public:
  int data;
  node* left;
  node* right;
  
  //constructor
  node(int d)
  {
      data=d;
      left=NULL;
      right=NULL;
  }
};


node* insertbst(node* root,int d)
{
    //base case
    if(root==NULL)
        return new node(d);
        
    //rec part
    if(d<=root->data)
    {
        root->left=insertbst(root->left,d);
    }
    
    else
    {
        root->right=insertbst(root->right,d);
    }
    
    return root;
}


node* buildbst()
{
    int d;
    cin>>d;
    
    node* root=NULL;
    while(d!=-1)
    {
        root=insertbst(root,d);
        cin>>d;
    }
    
    return root;
    
}



node* buildtree()
{
    int d;
    cin>>d;
    
    if(d==-1)
        return NULL;
    
    node* root=new node(d);
    
    //left child
    root->left=buildtree();
    
    //right child
    root->right=buildtree();
    
    return root;
}

//inorder traversal
void printIn(node* root)
{
    if(root==NULL)
        return;
    
    printIn(root->left);
    cout<<root->data<<" ";
    printIn(root->right);
}

//preorder traversal
void printPre(node* root)
{
    if(root==NULL)
        return;
    
    cout<<root->data<<" ";
    printPre(root->left);
    printPre(root->right);
}


//post order traversal
void printPost(node* root)
{
    if(root==NULL)
        return;
    printPost(root->left);
    printPost(root->right);
    cout<<root->data<<" ";
}

int height(node* root)
{
    if(root==NULL)
        return 0;
    
    int hr=height(root->right);
    int hl=height(root->left);
    
    return max(hr,hl)+1;
}

int diameter(node* root)
{
    if(root==NULL)
        return 0;
    
    //hr+hl
    int hr=height(root->right);
    int hl=height(root->left);
    
    int op1=hr+hl;
    
    //op2
    int op2=diameter(root->left);
    
    //op3
    int op3=diameter(root->right);
    
    return max(op1,max(op2,op3));
    
}

int main()
{
    node* root=buildbst();
    
    //inorder 
    cout<<"Inorder-";
    printIn(root);
    
    cout<<endl;
    
    //post order
    cout<<"Post order-";
    printPost(root);
    
    cout<<endl;
    
    //pre order
    cout<<"Pre order-";
    printPre(root);
    cout<<endl;
    
    cout<<"height="<<height(root)<<endl;
    
    cout<<"Diameter="<<diameter(root);
    
    return 0;
}

//input-8 3 10 1 6 4 7 10 14 13 -1
//output-
// Inorder-1 3 4 6 7 8 10 10 13 14 
// Post order-1 4 7 6 3 10 13 14 10 8 
// Pre order-8 3 1 6 4 7 10 10 14 13 
// height=4
// Diameter=6

